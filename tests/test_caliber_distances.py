import numpy as np
import nibabel as nib

from numpy.testing import assert_array_equal, assert_equal, assert_almost_equal

from labels_manager.tools.caliber.distances import centroid_array, centroid, dice_score, global_dice_score, \
    global_outline_error, covariance_matrices, covariance_distance




def test_centroid_array():
    test_arr = np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0],
                         [0, 0, 0, 0, 0, 0, 0, 0, 0],
                         [0, 1, 1, 1, 0, 0, 0, 0, 0],
                         [0, 1, 1, 1, 0, 0, 0, 0, 0],
                         [0, 1, 1, 1, 0, 2, 2, 2, 0],
                         [0, 0, 0, 0, 0, 2, 2, 2, 0],
                         [0, 0, 0, 0, 0, 2, 2, 2, 0],
                         [0, 0, 0, 0, 0, 0, 0, 0, 0],
                         [0, 0, 0, 0, 0, 0, 0, 0, 0]])

    ans = centroid_array(test_arr, labels=[1, 2, 3])
    assert_array_equal(ans[0], np.array([3,2]))
    assert_array_equal(ans[1], np.array([5,6]))
    assert_equal(ans[2], np.nan)


def test_centroid_array_2():
    test_arr = np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0],
                         [0, 0, 0, 0, 0, 0, 0, 0, 0],
                         [0, 1, 0, 0, 0, 0, 0, 0, 0],
                         [0, 1, 0, 0, 0, 0, 0, 0, 0],
                         [0, 1, 0, 0, 0, 0, 2, 0, 0],
                         [0, 1, 0, 0, 0, 0, 2, 0, 0],
                         [0, 1, 0, 0, 0, 0, 2, 0, 0],
                         [0, 0, 0, 0, 0, 0, 2, 0, 0],
                         [0, 0, 0, 0, 0, 0, 2, 0, 0]])

    ans = centroid_array(test_arr, labels=[1, 2, 7])
    assert_array_equal(ans[0], np.array([4,1]))
    assert_array_equal(ans[1], np.array([6,6]))
    assert_equal(ans[2], np.nan)


def test_centroid():
    test_arr = np.array([[[0, 0, 0, 0, 0, 0, 0, 0, 0],
                         [0, 0, 0, 0, 0, 0, 0, 0, 0],
                         [0, 1, 0, 0, 0, 0, 0, 0, 0],
                         [0, 1, 0, 0, 0, 0, 0, 0, 0],
                         [0, 1, 0, 0, 0, 0, 2, 0, 0],
                         [0, 1, 0, 0, 0, 0, 2, 0, 0],
                         [0, 1, 0, 0, 0, 0, 2, 0, 0],
                         [0, 0, 0, 0, 0, 0, 2, 0, 0],
                         [0, 0, 0, 0, 0, 0, 2, 0, 0]],

                         [[0, 0, 0, 0, 0, 0, 0, 0, 0],
                          [0, 0, 0, 0, 0, 0, 0, 0, 0],
                          [0, 1, 0, 0, 0, 0, 0, 0, 0],
                          [0, 1, 0, 0, 0, 0, 0, 0, 0],
                          [0, 1, 0, 0, 0, 0, 2, 0, 0],
                          [0, 1, 0, 0, 0, 0, 2, 0, 0],
                          [0, 1, 0, 0, 0, 0, 2, 0, 0],
                          [0, 0, 0, 0, 0, 0, 2, 0, 0],
                          [0, 0, 0, 0, 0, 0, 2, 0, 0]]
                         ])

    im = nib.Nifti1Image(test_arr, 0.5 * np.eye(4))
    ans_v = centroid(im, labels=[1, 2, 7], return_mm3=False)

    assert_array_equal(ans_v[0], np.array([0, 4, 1]))
    assert_array_equal(ans_v[1], np.array([0, 6, 6]))
    assert ans_v[2] == 0 or np.isnan(ans_v[2])

    ans_mm = centroid(im, labels=[1, 2, 7], return_mm3=True)

    assert_array_equal(ans_mm[0], .5 * np.array([0.5, 4, 1]))
    assert_array_equal(ans_mm[1], .5 * np.array([0.5, 6, 6]))
    assert ans_mm[2] == 0 or np.isnan(ans_mm[2])


def test_dice_score():
    arr_1 = np.array([[[0, 0, 0, 0, 0, 0, 0, 0, 0],
                       [0, 0, 0, 0, 0, 0, 0, 0, 0],
                       [0, 1, 0, 0, 0, 0, 0, 0, 0],
                       [0, 1, 0, 0, 0, 0, 0, 0, 0],
                       [0, 1, 0, 0, 0, 0, 2, 0, 0],
                       [0, 1, 0, 0, 0, 0, 2, 0, 0],
                       [0, 1, 0, 0, 0, 0, 2, 0, 0],
                       [0, 0, 0, 0, 0, 0, 2, 0, 0],
                       [0, 0, 0, 0, 0, 0, 2, 0, 0]],

                      [[0, 0, 0, 0, 0, 0, 0, 0, 0],
                       [0, 0, 0, 0, 0, 0, 0, 0, 0],
                       [0, 1, 0, 0, 0, 0, 0, 0, 0],
                       [0, 1, 0, 0, 0, 0, 0, 0, 0],
                       [0, 1, 0, 0, 0, 0, 2, 0, 0],
                       [0, 1, 0, 0, 0, 0, 2, 0, 0],
                       [0, 1, 0, 0, 0, 0, 2, 0, 0],
                       [0, 0, 0, 0, 0, 0, 2, 0, 0],
                       [0, 0, 0, 0, 0, 0, 2, 0, 0]]
                      ])

    arr_2 = np.array([[[0, 0, 0, 0, 0, 0, 0, 0, 0],
                       [0, 0, 0, 0, 0, 0, 0, 0, 0],
                       [0, 1, 0, 0, 0, 0, 0, 0, 0],
                       [0, 0, 0, 0, 0, 0, 0, 0, 0],
                       [0, 1, 0, 0, 0, 0, 2, 0, 0],
                       [0, 1, 0, 0, 0, 0, 2, 0, 0],
                       [0, 0, 0, 0, 0, 0, 2, 0, 0],
                       [0, 0, 0, 0, 0, 0, 2, 0, 0],
                       [0, 0, 0, 0, 0, 0, 0, 0, 0]],

                      [[0, 0, 0, 0, 0, 0, 0, 0, 0],
                       [0, 0, 0, 0, 0, 0, 0, 0, 0],
                       [0, 1, 0, 0, 0, 0, 0, 0, 0],
                       [0, 1, 0, 0, 0, 0, 0, 0, 0],
                       [0, 1, 0, 0, 0, 0, 2, 0, 0],
                       [0, 1, 0, 0, 0, 0, 2, 0, 0],
                       [0, 1, 0, 0, 0, 0, 2, 0, 0],
                       [0, 0, 0, 0, 0, 0, 0, 0, 0],
                       [0, 0, 0, 0, 0, 0, 0, 0, 0]]
                      ])

    arr_3 = np.array([[[0, 0, 0, 0, 1, 1, 0, 0, 0],
                       [0, 0, 0, 0, 1, 1, 0, 0, 0],
                       [0, 0, 0, 0, 1, 1, 0, 0, 0],
                       [0, 0, 0, 0, 1, 1, 0, 0, 0],
                       [0, 0, 0, 0, 1, 1, 0, 0, 0],
                       [0, 0, 0, 0, 0, 0, 0, 0, 0],
                       [0, 0, 0, 0, 0, 0, 0, 0, 0],
                       [0, 0, 0, 0, 0, 0, 0, 0, 0],
                       [0, 0, 0, 0, 0, 0, 0, 0, 0]],

                      [[0, 0, 0, 0, 1, 1, 0, 0, 0],
                       [0, 0, 0, 0, 1, 1, 0, 0, 0],
                       [0, 0, 0, 0, 1, 1, 0, 0, 0],
                       [2, 2, 2, 0, 1, 1, 0, 0, 0],
                       [2, 2, 2, 0, 1, 1, 0, 0, 0],
                       [2, 2, 2, 0, 0, 0, 0, 0, 0],
                       [2, 2, 2, 0, 0, 0, 0, 0, 0],
                       [0, 0, 0, 0, 0, 0, 0, 0, 0],
                       [0, 0, 0, 0, 0, 0, 0, 0, 0]]
                      ])

    im1 = nib.Nifti1Image(arr_1, np.eye(4))
    im2 = nib.Nifti1Image(arr_2, np.eye(4))
    im3 = nib.Nifti1Image(arr_3, np.eye(4))

    dice_1_1 = dice_score(im1, im1, [1, 2], ['lab1', 'lab2'])
    dice_1_2 = dice_score(im1, im2, [1, 2], ['lab1', 'lab2'])
    dice_1_3 = dice_score(im1, im3, [1, 2], ['lab1', 'lab2'])

    dice_1_3_extra_lab = dice_score(im1, im3, [1, 2, 5], ['lab1', 'lab2', 'lab5'])

    assert_equal(dice_1_1['lab1'], 1)
    assert_equal(dice_1_1['lab2'], 1)

    assert_equal(dice_1_2['lab1'], 16/18.)
    assert_equal(dice_1_2['lab2'], 14/17.)

    assert_equal(dice_1_3['lab1'], 0)
    assert_equal(dice_1_3['lab2'], 0)

    assert_equal(dice_1_3_extra_lab['lab2'], 0)
    assert_equal(dice_1_3_extra_lab['lab1'], 0)
    assert_equal(dice_1_3_extra_lab['lab5'], np.nan)



def test_global_dice_score():
    arr_1 = np.array([[[0, 0, 0, 0, 0, 0, 0, 0, 0],
                       [0, 0, 0, 0, 0, 0, 0, 0, 0],
                       [0, 1, 0, 0, 0, 0, 0, 0, 0],
                       [0, 1, 0, 0, 0, 0, 0, 0, 0],
                       [0, 1, 0, 0, 0, 0, 2, 0, 0],
                       [0, 1, 0, 0, 0, 0, 2, 0, 0],
                       [0, 1, 0, 0, 0, 0, 2, 0, 0],
                       [0, 0, 0, 0, 0, 0, 2, 0, 0],
                       [0, 0, 0, 0, 0, 0, 2, 0, 0]],

                      [[0, 0, 0, 0, 0, 0, 0, 0, 0],
                       [0, 0, 0, 0, 0, 0, 0, 0, 0],
                       [0, 1, 0, 0, 0, 0, 0, 0, 0],
                       [0, 1, 0, 0, 0, 0, 0, 0, 0],
                       [0, 1, 0, 0, 0, 0, 2, 0, 0],
                       [0, 1, 0, 0, 0, 0, 2, 0, 0],
                       [0, 1, 0, 0, 0, 0, 2, 0, 0],
                       [0, 0, 0, 0, 0, 0, 2, 0, 0],
                       [0, 0, 0, 0, 0, 0, 2, 0, 0]]
                      ])

    arr_2 = np.array([[[0, 0, 0, 0, 0, 0, 0, 0, 0],
                       [0, 0, 0, 0, 0, 0, 0, 0, 0],
                       [0, 1, 0, 0, 0, 0, 0, 0, 0],
                       [0, 0, 0, 0, 0, 0, 0, 0, 0],
                       [0, 1, 0, 0, 0, 0, 2, 0, 0],
                       [0, 1, 0, 0, 0, 0, 2, 0, 0],
                       [0, 0, 0, 0, 0, 0, 2, 0, 0],
                       [0, 0, 0, 0, 0, 0, 2, 0, 0],
                       [0, 0, 0, 0, 0, 0, 0, 0, 0]],

                      [[0, 0, 0, 0, 0, 0, 0, 0, 0],
                       [0, 0, 0, 0, 0, 0, 0, 0, 0],
                       [0, 1, 0, 0, 0, 0, 0, 0, 0],
                       [0, 1, 0, 0, 0, 0, 0, 0, 0],
                       [0, 1, 0, 0, 0, 0, 2, 0, 0],
                       [0, 1, 0, 0, 0, 0, 2, 0, 0],
                       [0, 1, 0, 0, 0, 0, 2, 0, 0],
                       [0, 0, 0, 0, 0, 0, 0, 0, 0],
                       [0, 0, 0, 0, 0, 0, 0, 0, 0]]
                      ])

    arr_3 = np.array([[[0, 0, 0, 0, 1, 1, 0, 0, 0],
                       [0, 0, 0, 0, 1, 1, 0, 0, 0],
                       [0, 0, 0, 0, 1, 1, 0, 0, 0],
                       [0, 0, 0, 0, 1, 1, 0, 0, 0],
                       [0, 0, 0, 0, 1, 1, 0, 0, 0],
                       [0, 0, 0, 0, 0, 0, 0, 0, 0],
                       [0, 0, 0, 0, 0, 0, 0, 0, 0],
                       [0, 0, 0, 0, 0, 0, 0, 0, 0],
                       [0, 0, 0, 0, 0, 0, 0, 0, 0]],

                      [[0, 0, 0, 0, 1, 1, 0, 0, 0],
                       [0, 0, 0, 0, 1, 1, 0, 0, 0],
                       [0, 0, 0, 0, 1, 1, 0, 0, 0],
                       [2, 2, 2, 0, 1, 1, 0, 0, 0],
                       [2, 2, 2, 0, 1, 1, 0, 0, 0],
                       [2, 2, 2, 0, 0, 0, 0, 0, 0],
                       [2, 2, 2, 0, 0, 0, 0, 0, 0],
                       [0, 0, 0, 0, 0, 0, 0, 0, 0],
                       [0, 0, 0, 0, 0, 0, 0, 0, 0]]
                      ])

    im1 = nib.Nifti1Image(arr_1, np.eye(4))
    im2 = nib.Nifti1Image(arr_2, np.eye(4))
    im3 = nib.Nifti1Image(arr_3, np.eye(4))

    g_dice_1_1 = global_dice_score(im1, im1, [1, 2])
    g_dice_1_2 = global_dice_score(im1, im2, [1, 2])
    g_dice_1_3 = global_dice_score(im1, im3, [1, 2])
    g_dice_1_2_extra_label = global_dice_score(im1, im2, [1, 2, 4])

    assert_equal(g_dice_1_1, 1)
    assert_equal(g_dice_1_2, (16 + 14) / (18. + 17.))
    assert_equal(g_dice_1_3, 0)
    assert_equal(g_dice_1_2_extra_label, (16 + 14) / (18. + 17.))


def test_global_outline_error():
    arr_1 = np.array([[[0, 0, 0, 0, 0, 0, 0, 0, 0],
                       [0, 0, 0, 0, 0, 0, 0, 0, 0],
                       [0, 1, 0, 0, 0, 0, 0, 0, 0],
                       [0, 1, 0, 0, 0, 0, 0, 0, 0],
                       [0, 1, 0, 0, 0, 0, 2, 0, 0],
                       [0, 1, 0, 0, 0, 0, 2, 0, 0],
                       [0, 1, 0, 0, 0, 0, 2, 0, 0],
                       [0, 0, 0, 0, 0, 0, 2, 0, 0],
                       [0, 0, 0, 0, 0, 0, 2, 0, 0]],

                      [[0, 0, 0, 0, 0, 0, 0, 0, 0],
                       [0, 0, 0, 0, 0, 0, 0, 0, 0],
                       [0, 1, 0, 0, 0, 0, 0, 0, 0],
                       [0, 1, 0, 0, 0, 0, 0, 0, 0],
                       [0, 1, 0, 0, 0, 0, 2, 0, 0],
                       [0, 1, 0, 0, 0, 0, 2, 0, 0],
                       [0, 1, 0, 0, 0, 0, 2, 0, 0],
                       [0, 0, 0, 0, 0, 0, 2, 0, 0],
                       [0, 0, 0, 0, 0, 0, 2, 0, 0]]
                      ])
    arr_2 = np.array([[[0, 0, 0, 0, 0, 0, 0, 0, 0],
                       [0, 0, 0, 0, 0, 0, 0, 0, 0],
                       [0, 1, 0, 0, 0, 0, 0, 0, 0],
                       [0, 0, 0, 0, 0, 0, 0, 0, 0],
                       [0, 1, 0, 0, 0, 0, 2, 0, 0],
                       [0, 1, 0, 0, 0, 0, 2, 0, 0],
                       [0, 0, 0, 0, 0, 0, 2, 0, 0],
                       [0, 0, 0, 0, 0, 0, 2, 0, 0],
                       [0, 0, 0, 0, 0, 0, 0, 0, 0]],

                      [[0, 0, 0, 0, 0, 0, 0, 0, 0],
                       [0, 0, 0, 0, 0, 0, 0, 0, 0],
                       [0, 1, 0, 0, 0, 0, 0, 0, 0],
                       [0, 1, 0, 0, 0, 0, 0, 0, 0],
                       [0, 1, 0, 0, 0, 0, 2, 0, 0],
                       [0, 1, 0, 0, 0, 0, 2, 0, 0],
                       [0, 1, 0, 0, 0, 0, 2, 0, 0],
                       [0, 0, 0, 0, 0, 0, 0, 0, 0],
                       [0, 0, 0, 0, 0, 0, 0, 0, 0]]
                      ])
    arr_3 = np.array([[[0, 0, 0, 0, 1, 1, 0, 0, 0],
                       [0, 0, 0, 0, 1, 1, 0, 0, 0],
                       [0, 0, 0, 0, 1, 1, 0, 0, 0],
                       [0, 0, 0, 0, 1, 1, 0, 0, 0],
                       [0, 0, 0, 0, 1, 1, 0, 0, 0],
                       [0, 0, 0, 0, 0, 0, 0, 0, 0],
                       [0, 0, 0, 0, 0, 0, 0, 0, 0],
                       [0, 0, 0, 0, 0, 0, 0, 0, 0],
                       [0, 0, 0, 0, 0, 0, 0, 0, 0]],

                      [[0, 0, 0, 0, 1, 1, 0, 0, 0],
                       [0, 0, 0, 0, 1, 1, 0, 0, 0],
                       [0, 0, 0, 0, 1, 1, 0, 0, 0],
                       [2, 2, 2, 0, 1, 1, 0, 0, 0],
                       [2, 2, 2, 0, 1, 1, 0, 0, 0],
                       [2, 2, 2, 0, 0, 0, 0, 0, 0],
                       [2, 2, 2, 0, 0, 0, 0, 0, 0],
                       [0, 0, 0, 0, 0, 0, 0, 0, 0],
                       [0, 0, 0, 0, 0, 0, 0, 0, 0]]
                      ])

    im1 = nib.Nifti1Image(arr_1, np.eye(4))
    im2 = nib.Nifti1Image(arr_2, np.eye(4))
    im3 = nib.Nifti1Image(arr_3, np.eye(4))

    goe_1_1 = global_outline_error(im1, im1, [1, 2])
    goe_1_2 = global_outline_error(im1, im2, [1,2])
    goe_1_3 = global_outline_error(im1, im3, [1, 2])

    assert_equal(goe_1_1, 0)
    assert_almost_equal(goe_1_2 * .5 * (20 + 15), 5)
    assert_almost_equal(goe_1_3 * .5 * (20 + 32), 48)

    assert_equal(goe_1_1, 0)
    assert_almost_equal(goe_1_2, 5 / (.5 * (20 + 15)))
    assert_almost_equal(goe_1_3, 48 / (.5 * (20 + 32)))


def test_covariance_matrices():
    arr_1 = np.array([[[0, 0, 0, 0, 0, 0, 0, 0, 0],
                       [0, 0, 0, 0, 0, 0, 0, 0, 0],
                       [0, 1, 1, 1, 1, 1, 0, 0, 0],
                       [0, 1, 1, 1, 1, 1, 0, 0, 0],
                       [0, 1, 1, 1, 1, 1, 2, 2, 0],
                       [0, 1, 1, 1, 1, 1, 2, 2, 0],
                       [0, 1, 1, 1, 1, 1, 0, 3, 3],
                       [0, 0, 0, 0, 0, 0, 0, 3, 3],
                       [0, 0, 0, 0, 0, 3, 3, 3, 3]],

                      [[0, 0, 0, 0, 0, 0, 0, 0, 0],
                       [0, 0, 0, 0, 0, 0, 0, 0, 0],
                       [0, 1, 1, 1, 1, 1, 0, 0, 0],
                       [0, 1, 1, 1, 1, 1, 0, 0, 0],
                       [0, 1, 1, 1, 1, 1, 2, 2, 0],
                       [0, 1, 1, 1, 1, 1, 2, 2, 0],
                       [0, 1, 1, 1, 1, 1, 0, 0, 3],
                       [0, 0, 0, 0, 0, 0, 0, 3, 3],
                       [0, 0, 0, 0, 0, 0, 3, 3, 3]]
                      ])

    im1 = nib.Nifti1Image(arr_1, np.eye(4))

    cov =  covariance_matrices(im1, [1,2, 3])
    assert len(cov) == 3
    for i in cov:
        assert_array_equal(i.shape, [3, 3])
        if np.count_nonzero(i - np.diag(np.diagonal(i))) == 0:
            assert_array_equal(np.diag(np.diag(i)), i)

    cov1 = covariance_matrices(im1, [1, 2, 3, 4])
    assert_array_equal(cov1[-1], np.nan * np.ones([3, 3]))


def test_covariance_distance():
    arr_1 = np.array([[[0, 0, 0, 0, 0, 0, 0, 0, 0],
                       [0, 0, 0, 0, 0, 0, 0, 0, 0],
                       [0, 0, 0, 0, 0, 0, 0, 0, 0],
                       [0, 0, 0, 0, 0, 0, 0, 0, 0],
                       [0, 0, 0, 0, 0, 0, 2, 2, 0],
                       [0, 0, 0, 0, 0, 0, 2, 2, 0],
                       [0, 0, 0, 0, 0, 0, 2, 2, 0],
                       [0, 0, 0, 0, 0, 0, 2, 2, 0],
                       [0, 0, 0, 0, 0, 0, 2, 2, 0]],

                      [[0, 0, 0, 0, 0, 0, 0, 0, 0],
                       [0, 0, 0, 0, 0, 0, 0, 0, 0],
                       [0, 1, 0, 0, 0, 0, 0, 0, 0],
                       [0, 1, 0, 0, 0, 0, 0, 0, 0],
                       [0, 1, 0, 0, 0, 0, 2, 2, 0],
                       [0, 1, 0, 0, 0, 0, 2, 2, 0],
                       [0, 1, 0, 0, 0, 0, 2, 2, 0],
                       [0, 0, 0, 0, 0, 0, 2, 2, 0],
                       [0, 0, 0, 0, 0, 0, 2, 2, 0]]
                      ])

    arr_2 = np.array([[[0, 0, 0, 0, 0, 0, 0, 0, 0],
                       [0, 0, 0, 0, 0, 0, 0, 0, 0],
                       [0, 0, 0, 0, 0, 0, 0, 0, 0],
                       [0, 0, 0, 0, 2, 2, 0, 0, 0],
                       [0, 0, 0, 0, 2, 2, 0, 0, 0],
                       [0, 0, 0, 0, 2, 2, 0, 0, 0],
                       [0, 0, 0, 0, 2, 2, 0, 0, 0],
                       [0, 0, 0, 0, 2, 2, 0, 0, 0],
                       [0, 0, 0, 0, 0, 0, 0, 0, 0]],

                      [[0, 0, 0, 0, 0, 0, 0, 0, 0],
                       [0, 0, 1, 0, 0, 0, 0, 0, 0],
                       [0, 0, 1, 0, 0, 0, 0, 0, 0],
                       [0, 0, 1, 0, 2, 2, 0, 0, 0],
                       [0, 0, 1, 0, 2, 2, 0, 0, 0],
                       [0, 0, 1, 0, 2, 2, 0, 0, 0],
                       [0, 0, 0, 0, 2, 2, 0, 0, 0],
                       [0, 0, 0, 0, 2, 2, 0, 0, 0],
                       [0, 0, 0, 0, 0, 0, 0, 0, 0]]
                      ])

    arr_3 = np.array([[[0, 1, 1, 1, 1, 1, 0, 0, 0],
                       [0, 0, 0, 0, 0, 0, 0, 0, 0],
                       [0, 0, 0, 0, 0, 0, 0, 0, 0],
                       [0, 0, 0, 0, 0, 0, 0, 0, 0],
                       [0, 0, 0, 0, 0, 0, 0, 0, 0],
                       [0, 0, 0, 0, 0, 0, 0, 0, 0],
                       [0, 0, 0, 0, 0, 0, 0, 0, 0],
                       [0, 0, 0, 0, 0, 0, 0, 0, 0],
                       [0, 0, 0, 0, 0, 0, 0, 0, 0]],

                      [[0, 0, 0, 0, 0, 0, 0, 0, 0],
                       [0, 0, 0, 0, 0, 0, 0, 0, 0],
                       [0, 0, 0, 0, 0, 0, 0, 0, 0],
                       [0, 0, 0, 0, 0, 0, 0, 0, 0],
                       [0, 0, 0, 0, 0, 0, 0, 0, 0],
                       [2, 2, 2, 2, 2, 0, 0, 0, 0],
                       [0, 0, 0, 0, 0, 0, 0, 0, 0],
                       [0, 0, 0, 0, 0, 0, 0, 0, 0],
                       [0, 0, 0, 0, 0, 0, 0, 0, 0]]
                      ])

    im1 = nib.Nifti1Image(arr_1, np.eye(4))
    im2 = nib.Nifti1Image(arr_2, np.eye(4))
    im3 = nib.Nifti1Image(arr_3, np.eye(4))

    cd_1_1 = covariance_distance(im1, im1, [1, 2], ['label1', 'label2'])
    cd_1_2 = covariance_distance(im1, im2, [1, 2], ['label1', 'label2'])
    cd_1_3 = covariance_distance(im1, im3, [1, 2], ['label1', 'label2'])
    cd_1_2_extra_label = covariance_distance(im1, im2, [1, 2, 4], ['label1', 'label2', 'label4'])

    assert_almost_equal(cd_1_1['label1'], 0)
    assert_almost_equal(cd_1_1['label2'], 0)
    # insensitive to shifts
    assert_almost_equal(cd_1_2['label1'], 0)
    assert_almost_equal(cd_1_2['label2'], 0)
    # maximised for 90deg linear structures.
    assert_almost_equal(cd_1_3['label1'], 1)
    assert_almost_equal(cd_1_2_extra_label['label4'], np.nan)


def test_hausdorff_distance():
    pass